Solar Power Monitoring System
 
Real-time monitoring of solar panel performance with:
  - Voltage and current measurement for power calculation
  - Temperature monitoring (ambient and panel)  
  - Light intensity measurement
  - LCD display for local monitoring
  - Serial output for data viewing
  
Author: Roshni N Kumar
Date: 2024
 
-------------------------


#include <LiquidCrystal.h>

// Pin Definitions
#define VOLTAGE_PIN A0       // Voltage divider output
#define CURRENT_PIN A1       // ACS712 current sensor
#define LM35_PIN A3          // LM35 temperature sensor output
#define LDR_PIN A2           // LDR output
#define STATUS_LED_PIN 13    // Status LED (optional)

// LCD Pin Configuration (4-bit mode)
#define LCD_RS 7
#define LCD_EN 8
#define LCD_D4 9
#define LCD_D5 10
#define LCD_D6 11
#define LCD_D7 12

// System Constants
#define VOLTAGE_CALIBRATION 25.0   // Voltage divider scaling factor
#define ACS712_SENSITIVITY 0.066   // 30A version: 66mV/A
#define ACS712_ZERO_POINT 2.5      // Zero-current voltage (VCC/2)
#define SAMPLE_COUNT 5             // Number of samples to average
#define DISPLAY_INTERVAL 3000      // LCD update interval (ms)
#define PANEL_RATED_POWER 100.0    // Rated panel power (W)

// Initialize LCD
LiquidCrystal lcd(LCD_RS, LCD_EN, LCD_D4, LCD_D5, LCD_D6, LCD_D7);

// Global Variables
float voltage = 0.0;
float current = 0.0;
float power = 0.0;
float panelTemp = 0.0;
float lightIntensity = 0.0;
float efficiency = 0.0;

unsigned long lastDisplayTime = 0;
int displayMode = 0;

void setup() {
  Serial.begin(9600);
  pinMode(STATUS_LED_PIN, OUTPUT);

  lcd.begin(16, 2);
  lcd.print("Solar Monitor");
  lcd.setCursor(0, 1);
  lcd.print("Starting...");
  delay(2000);
  lcd.clear();

  Serial.println("=== Solar Power Monitoring System ===");
}

void loop() {
  unsigned long currentTime = millis();

  // Read sensors
  voltage = readVoltage();
  current = readCurrent();
  panelTemp = readTemperature();
  lightIntensity = readLightIntensity();

  // Calculate power and efficiency
  calculateDerivedValues();

  // Update LCD
  if (currentTime - lastDisplayTime >= DISPLAY_INTERVAL) {
    updateDisplay();
    lastDisplayTime = currentTime;
  }

  // Serial output
  printSensorData();

  // Status LED heartbeat
  digitalWrite(STATUS_LED_PIN, (currentTime / 1000) % 2);

  delay(1000);
}

// ================== SENSOR FUNCTIONS ==================
float readVoltage() {
  long sum = 0;
  for (int i = 0; i < SAMPLE_COUNT; i++) {
    sum += analogRead(VOLTAGE_PIN);
    delay(5);
  }
  float avg = sum / (float)SAMPLE_COUNT;
  float measuredVoltage = (avg / 1023.0) * 5.0 * VOLTAGE_CALIBRATION;
  return measuredVoltage;
}

float readCurrent() {
  long sum = 0;
  for (int i = 0; i < SAMPLE_COUNT; i++) {
    sum += analogRead(CURRENT_PIN);
    delay(5);
  }
  float avg = sum / (float)SAMPLE_COUNT;
  float sensorVoltage = (avg / 1023.0) * 5.0;
  float measuredCurrent = (sensorVoltage - ACS712_ZERO_POINT) / ACS712_SENSITIVITY;
  return max(0.0, measuredCurrent); // Prevent negative values
}

float readTemperature() {
  int adcValue = analogRead(LM35_PIN);
  float voltage = adcValue * (5.0 / 1023.0);
  float temperatureC = voltage * 100.0; // 10mV per °C
  return temperatureC;
}

float readLightIntensity() {
  int reading = analogRead(LDR_PIN);
  float lux = map(reading, 0, 1023, 0, 50000); // Rough conversion
  return lux;
}

// ================== CALCULATIONS ==================
void calculateDerivedValues() {
  power = voltage * current;

  if (PANEL_RATED_POWER > 0) {
    efficiency = (power / PANEL_RATED_POWER) * 100.0;
    efficiency = min(efficiency, 100.0);
  } else {
    efficiency = 0.0;
  }

  // Temperature compensation (~0.4% per °C above 25)
  if (panelTemp > -40 && panelTemp < 125) {
    float tempComp = 1.0 - 0.004 * (panelTemp - 25.0);
    efficiency *= tempComp;
  }
}

// ================== DISPLAY ==================
void updateDisplay() {
  lcd.clear();
  switch (displayMode % 4) {
    case 0: // Power and Voltage
      lcd.setCursor(0, 0);
      lcd.print("Pwr:");
      lcd.print(power, 1);
      lcd.print("W");
      lcd.setCursor(0, 1);
      lcd.print("Vol:");
      lcd.print(voltage, 1);
      lcd.print("V");
      break;

    case 1: // Current and Efficiency
      lcd.setCursor(0, 0);
      lcd.print("Cur:");
      lcd.print(current, 2);
      lcd.print("A");
      lcd.setCursor(0, 1);
      lcd.print("Eff:");
      lcd.print(efficiency, 0);
      lcd.print("%");
      break;

    case 2: // Temperature
      lcd.setCursor(0, 0);
      lcd.print("Temp:");
      lcd.print(panelTemp, 1);
      lcd.print("C");
      lcd.setCursor(0, 1);
      lcd.print("Light:");
      lcd.print(lightIntensity, 0);
      break;

    case 3: // Only Light Intensity
      lcd.setCursor(0, 0);
      lcd.print("Light Intensity");
      lcd.setCursor(0, 1);
      lcd.print(lightIntensity, 0);
      lcd.print(" Lux");
      break;
  }
  displayMode++;
}

// ================== SERIAL MONITOR ==================
void printSensorData() {
  Serial.println("=== Solar Monitor Reading ===");
  Serial.print("Voltage: "); Serial.print(voltage, 2); Serial.println(" V");
  Serial.print("Current: "); Serial.print(current, 3); Serial.println(" A");
  Serial.print("Power: "); Serial.print(power, 1); Serial.println(" W");
  Serial.print("Temperature: "); Serial.print(panelTemp, 1); Serial.println(" °C");
  Serial.print("Light Intensity: "); Serial.print(lightIntensity, 0); Serial.println(" Lux");
  Serial.print("Efficiency: "); Serial.print(efficiency, 1); Serial.println(" %");
  Serial.println("=============================");
  Serial.println();
}
